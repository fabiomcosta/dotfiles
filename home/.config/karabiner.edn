;; Implementation of this keyboard layout
;; http://www.keyboard-layout-editor.com/#/gists/5ddb4214a2999a9ba0b298dbecbd0685

;; !  | means mandatory -   modifier(s) alone when pressend change behavior
;; #  | means optional  -   modifiers are optional (but atleast one necessary)

;; :!Ca is keycode :a and prefix a with !C

;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift

;; ## | optional any
;; !! | command + control + optional + shift (hyper)

{
  :profiles  {
    :Goku {
      :default true
      :sim 50     ; Keys need to be pressed within this threshold to be considered simultaneous
      :delay 500  ; Time after which the key press is delayed
      :held 500   ; TODO: not sure what it's for
      :alone 1000  ; Hold for .. ms to register single tap
    }
  }

  :devices   {:macbook-internal [{:vendor_id 1452  :product_id 832}]
              :kadv2            [{:vendor_id 10730 :product_id 258}]}

  :applications {
    :chrome ["^com\\.google\\.Chrome$"]
  }

  :tos {
    :hyper-key {:key :!CTOleft_shift}
    ; :meh-key {:key :!TOleft_shift}
  }

  ;; each manipulator has a description and multiple rules

  ;;{:des "..."                                       ;; -> description
  ;; :rules[
  ;;          [<from>  <to>  <conditions>]            ;; -> rule 1
  ;;          [<from>  <to>  <conditions>]            ;; -> rule 2
  ;; ]}

  ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
  ;;       |_____| |_______________| |_| |_________________________________________|
  ;;        <from>    <to>      <conditions>         <other options>

  :main [
    ;; Navigation Mode, based on (S)uper (D)uper mode
    ;; idea from https://github.com/jasonrudolph/keyboard
    ;; implementation from https://gist.github.com/narze/1eb7d0f14b6177ea0360f5dc214867b0
    {:des " Toggle Navigation Mode"
       :rules [
        [{:sim [:s :d]
          :simo {
            :interrupt true
            :afterup {:set ["navigation-mode" 0]}}
         }
         {:set ["navigation-mode" 1]}
        ]
    ]}
    {:des "Navigation Mode"
       :rules [:navigation-mode
        [:##j :down_arrow ]
        [:##k :up_arrow]
        [:##h :left_arrow]
        [:##l :right_arrow]
        [:##f :right_shift]
        [:##r :!Cc]
        [:##v :!Cv]

        [:##a :left_command]
        [:##i :!CSopen_bracket]
        [:##o :!CSclose_bracket]
        [:##u :!Ct]
        [:##m :!Cw]
    ]}

    ;; Meh layer/mode: a numbers + symbols layer
    {:des "Meh Mode"
       :rules [:meh-mode
        ;; Left hand home row
        [:##f :!S9]
        [:##d :!Sopen_bracket]
        [:##s :open_bracket]
        [:##a :!Sgrave_accent_and_tilde]
        ;; Right hand home row
        [:##j :!S0]
        [:##k :!Sclose_bracket]
        [:##l :close_bracket]
        [:##semicolon :grave_accent_and_tilde]
        ;; Numbers
        [:##q :1]
        [:##w :2]
        [:##e :3]
        [:##r :4]
        [:##t :5]
        [:##y :6]
        [:##u :7]
        [:##i :8]
        [:##o :9]
        [:##p :0]
        ;; Symbols
        [:##z :!S1]
        [:##x :!S2]
        [:##c :!S3]
        [:##v :!S4]
        [:##m :!S5]
        [:##comma :!S6]
        [:##period :!S7]
        [:##slash :!S8]
    ]}


    {:des "Apple keyboards"
      :rules [:macbook-internal
        [:##right_option :hyper-key]
        ;; caps_lock: alone -> escape, hold -> left_control
        [:##caps_lock :left_control nil {:alone :escape}]
    ]}

    {:des "Kinesis Advantage"
       :rules [:kadv2
        ;; Disable arrow keys
        [:##left_arrow :vk_none]
        [:##right_arrow :vk_none]
        [:##up_arrow :vk_none]
        [:##down_arrow :vk_none]
        ;; Disable some thumb cluster keys
        [:##right_option :vk_none]
        [:##left_option :vk_none]
        [:##page_up :vk_none]
        [:##home :vk_none]
        [:##end :vk_none]
        [:##page_down :vk_none]
        ;; Disable some base layour keys
        [:##non_us_backslash :vk_none]
        [:##grave_accent_and_tilde :vk_none]
        [:##open_bracket :vk_none]
        [:##close_bracket :vk_none]
        ;; Disable number row
        [:##hyphen :vk_none]
        [:##equal_sign :vk_none]
        [:##1 :vk_none]
        [:##2 :vk_none]
        [:##3 :vk_none]
        [:##4 :vk_none]
        [:##5 :vk_none]
        [:##6 :vk_none]
        [:##7 :vk_none]
        [:##8 :vk_none]
        [:##9 :vk_none]
        [:##0 :vk_none]

        ;; "tab: hold -> left_option"
        [:##tab :left_option nil {:alone :tab}]
        ;; caps_lock: alone -> escape, hold -> left_command
        [:##caps_lock :left_command nil {:alone :escape}]
        ;; "backslash: hold -> right_option"
        [:##backslash :right_option nil {:alone :backslash}]
        ;; "quote: hold -> right_command" with a 200 delay before command is actually activated
        ;; See https://karabiner-elements.pqrs.org/docs/json/typical-complex-modifications-examples/#open-alfred-4-if-escape-is-held-down
        [:##quote nil nil {:alone :quote :held :right_command :params {:alone 200 :held 200}}]
        ;; "enter: alone -> return_or_enter, hold -> right_control"
        [:##return_or_enter :right_control nil {:alone :return_or_enter}]
        ;; "delete: alone -> delete, hold -> meh-mode"
        [:##delete_forward ["meh-mode" 1] nil {:afterup ["meh-mode" 0] :alone :delete_forward}]
        ;; "left_shift: alone -> equal_sign"
        [:##left_shift :left_shift nil {:alone :equal_sign}]
        ;; "right_shift: alone -> hyphen"
        [:##right_shift :right_shift nil {:alone :hyphen}]
        ;; "left and right commands: hyper-key"
        [:##right_command :hyper-key]
        [:##left_command :hyper-key]

        ;; TODO dev layer? https://wiki.monosor.com/keyboard
    ]}
  ]
}
