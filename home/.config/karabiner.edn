;; Implementation of this keyboard layout
;; http://www.keyboard-layout-editor.com/#/gists/5ddb4214a2999a9ba0b298dbecbd0685

;; !  | means mandatory -   modifier(s) alone when pressed change behavior
;; #  | means optional  -   modifiers are optional (but at least one necessary)

;; :!Ca is keycode :a and prefix a with !C

;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift

;; ## | optional any
;; !! | command + control + optional + shift (hyper)

{
  :profiles  {
    :Goku {
      :default true
      :sim 160    ; Keys need to be pressed within this threshold to be considered simultaneous
      :delay 210  ; Time after which the key press is delayed
      :held 210   ; Delay to register held key
      :alone 210  ; Hold for .. ms to register single tap
    }
  }

  :devices {
    :macbook_internal [{:vendor_id 1452  :product_id 832}]
    :kadv2            [{:vendor_id 10730 :product_id 258}]
  }

  :applications {
    :browser ["^com\\.google\\.Chrome$"]
    :outlook ["^com\\.microsoft\\.Outlook$"]
    :workplace_chat ["^workplace-desktop$"]
    :terminal ["^io\\.alacritty$"]
  }

  :templates {
    :hsl "/usr/local/bin/hs -A -n -q -t 0.1 -c 'require(\"keyboard.hyper\").openApplication(\"%s\")'"
    ;; https://github.com/kfix/ddcctl
    ;; -i 16 is display-port 2
    ;; -d 1 is display 1
    :external_display_brightness_increment "/usr/local/bin/ddcctl -i 16 -d 1 -b 20+"
    :external_display_brightness_decrement "/usr/local/bin/ddcctl -i 16 -d 1 -b 20-"
  }

  :simlayer-threshold 210
  :simlayers {
    :mouse_mode {:key :a :afterup {:set ["mouse_mode_scroll" 0]}}
  }

  :layers {
    :fn_mode {:key :slash}
    :media_mode {:key :period}
    :open_mode {:key :comma}
  }

  ;; each manipulator has a description and multiple rules

  ;;{:des "..."                                       ;; -> description
  ;; :rules[
  ;;          [<from>  <to>  <conditions>]            ;; -> rule 1
  ;;          [<from>  <to>  <conditions>]            ;; -> rule 2
  ;; ]}

  ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
  ;;       |_____| |_______________| |_| |_________________________________________|
  ;;        <from>    <to>      <conditions>         <other options>

  :main [

    {:des "mouse mode"
      :rules [
        [:##j {:mkey {:vwheel 120}} [:mouse_mode_scroll :mouse_mode]]
        [:##h {:mkey {:hwheel 120}} [:mouse_mode_scroll :mouse_mode]]
        [:##k {:mkey {:vwheel -120}} [:mouse_mode_scroll :mouse_mode]]
        [:##l {:mkey {:hwheel -120}} [:mouse_mode_scroll :mouse_mode]]
        :mouse_mode
        [:##j {:mkey {:y 3072}}]
        [:##k {:mkey {:y -3072}}]
        [:##h {:mkey {:x -3072}}]
        [:##l {:mkey {:x 3072}}]
        [:##c {:pkey :button1}]
        [:##v {:pkey :button3}]
        [:##b {:pkey :button2}]
        [:##s ["mouse_mode_scroll" 1] nil {:afterup ["mouse_mode_scroll" 0]}]
        [:##f {:mkey {:speed 0.5}}]
    ]}

    {:des "fn mode"
      :rules [:fn_mode
        [:##q :f1]
        [:##w :f2]
        [:##e :f3]
        [:##r :f4]
        [:##t :f5]
        [:##y :f6]
        [:##u :f7]
        [:##i :f8]
        [:##o :f9]
        [:##p :f10]
        [:##a :f11]
        [:##s :f12]
        [:d :!SC4] ; activates screen-shot mode
        [:f :!SC5] ; activates screen-recording mode
    ]}

    {:des "media mode"
      :rules [:media_mode
        [:q :display_brightness_decrement]
        [:w :display_brightness_increment]
        [:e [:external_display_brightness_decrement]]
        [:r [:external_display_brightness_increment]]
        ; [:e :illumination_decrement]
        ; [:r :illumination_increment]
        [:a :mission_control]
        [:s :rewind]
        [:d :play_or_pause]
        [:f :fastforward]
        [:x :mute]
        [:c :volume_decrement]
        [:v :volume_increment]
    ]}

    {:des "open mode"
      :rules [:open_mode
        [:a [:hsl "Spotify"]]
        [:b [:hsl "Google Chrome"]]
        [:c [:hsl "Workplace Chat"]]
        [:e [:hsl "VS Code @ FB"]]
        [:f [:hsl "Finder"]]
        [:m [:hsl "Microsoft Outlook"]]
        [:t [:hsl "Alacritty"]]
        [:n [:hsl "Notion"]]
    ]}

    {:des "numbers mode"
      :rules [:numbers_mode
        [:##q :1]
        [:##w :2]
        [:##e :3]
        [:##r :4]
        [:##t :5]
        [:##y :6]
        [:##u :7]
        [:##i :8]
        [:##o :9]
        [:##p :0]
    ]}

    {:des "symbols mode, fluid typing protection"
      :rules [
        [{:sim [:s :q] :simo {:dorder :strict}} [:s :q]]
        [{:sim [:s :e] :simo {:dorder :strict}} [:s :e]]
        [{:sim [:s :r] :simo {:dorder :strict}} [:s :r]]
        [{:sim [:s :t] :simo {:dorder :strict}} [:s :t]]
        [{:sim [:s :a] :simo {:dorder :strict}} [:s :a]]
        [{:sim [:s :d] :simo {:dorder :strict}} [:s :d]]
        [{:sim [:s :f] :simo {:dorder :strict}} [:s :f]]
        [{:sim [:s :g] :simo {:dorder :strict}} [:s :g]]
        [{:sim [:s :z] :simo {:dorder :strict}} [:s :z]]
        [{:sim [:s :c] :simo {:dorder :strict}} [:s :c]]
        [{:sim [:s :v] :simo {:dorder :strict}} [:s :v]]
        [{:sim [:s :b] :simo {:dorder :strict}} [:s :b]]
        [{:sim [:s :y] :simo {:dorder :strict}} [:s :y]]
        [{:sim [:s :u] :simo {:dorder :strict}} [:s :u]]
        [{:sim [:s :i] :simo {:dorder :strict}} [:s :i]]
        [{:sim [:s :o] :simo {:dorder :strict}} [:s :o]]
        [{:sim [:s :p] :simo {:dorder :strict}} [:s :p]]
        [{:sim [:s :h] :simo {:dorder :strict}} [:s :h]]
        [{:sim [:s :j] :simo {:dorder :strict}} [:s :j]]
        [{:sim [:s :k] :simo {:dorder :strict}} [:s :k]]
        [{:sim [:s :l] :simo {:dorder :strict}} [:s :l]]
        [{:sim [:s :n] :simo {:dorder :strict}} [:s :n]]
        [{:sim [:s :m] :simo {:dorder :strict}} [:s :m]]
        [{:sim [:s :comma] :simo {:dorder :strict}} [:s :comma]]
        [{:sim [:s :slash] :simo {:dorder :strict}} [:s :slash]]
        [{:sim [:s :period] :simo {:dorder :strict}} [:s :period]]
        [{:sim [:s :spacebar] :simo {:dorder :strict}} [:s :spacebar]]
        [{:sim [:s :semicolon] :simo {:dorder :strict}} [:s :semicolon]]
        [{:sim [:s :return_or_enter] :simo {:dorder :strict}} [:s :return_or_enter]]
        [{:sim [:s :delete_or_backspace] :simo {:dorder :strict}} [:s :delete_or_backspace]]
    ]}
    {:des "toggle symbols mode"
      :rules [
        [:s ["symbols_mode" 1] nil {:alone :s :afterup ["symbols_mode" 0]}]
    ]}
    {:des "symbols mode"
      :rules [:symbols_mode
        [:##e :equal_sign]               ; =
        [:##r :!Sequal_sign]             ; +
        [:##t :!S5]                      ; %
        [:##d :hyphen]                   ; -
        [:##f :!Shyphen]                 ; _
        [:##g :!S7]                      ; &
        [:##c :backslash]                ; \
        [:##v :!Sbackslash]              ; |
        [:##b :!Sgrave_accent_and_tilde] ; ~
        [:##y :!Squote]                  ; "
        [:##h :quote]                    ; '
        [:##n :grave_accent_and_tilde]   ; `
        [:##u :!Sopen_bracket]           ; {
        [:##i :!Sclose_bracket]          ; }
        [:##j :!S9]                      ; (
        [:##k :!S0]                      ; )
        [:##m :open_bracket]             ; [
        [:##comma :close_bracket]        ; ]
        [:##o :!S1]                      ; !
        [:##p :!S2]                      ; @
        [:##l :!S3]                      ; #
        [:##semicolon :!S8]              ; *
        [:##period :!S6]                 ; ^
        [:##slash :!S4]                  ; $
        [:##quote :!S5]                  ; %
    ]}

    ;; Navigation Mode, based on (S)uper (D)uper mode
    ;; idea from https://github.com/jasonrudolph/keyboard
    ;; implementation from https://gist.github.com/narze/1eb7d0f14b6177ea0360f5dc214867b0

    ;; I'd consider this a new type of layer, it's different from
    ;; simlayers and layers, let me try to explain.
    ;;
    ;; This new type of layer is very similar to what's called "layer" on goku,
    ;; in the sense that when holding the key that defines the layer, the key
    ;; itself won't be triggered nor repea will, but it fixes the issue that
    ;; woudln't allow fast typing using that key by adding these simultaneous
    ;; interrupt events on each other key that can be simultaneously pressed
    ;; with the layer key.
    ;; This means that the layer is only really activated if the layer key is
    ;; pressed adn held for a little while, and not used simultaneously with
    ;; other keys.
    ;; This is perfect for home row modifier configurations, for example.
    {:des "navigation mode, fluid typing protection"
      :rules [
        [{:sim [:d :q] :simo {:dorder :strict}} [:d :q]]
        [{:sim [:d :w] :simo {:dorder :strict}} [:d :w]]
        [{:sim [:d :r] :simo {:dorder :strict}} [:d :r]]
        [{:sim [:d :t] :simo {:dorder :strict}} [:d :t]]
        [{:sim [:d :a] :simo {:dorder :strict}} [:d :a]]
        [{:sim [:d :s] :simo {:dorder :strict}} [:d :s]]
        [{:sim [:d :f] :simo {:dorder :strict}} [:d :f]]
        [{:sim [:d :g] :simo {:dorder :strict}} [:d :g]]
        [{:sim [:d :z] :simo {:dorder :strict}} [:d :z]]
        [{:sim [:d :x] :simo {:dorder :strict}} [:d :x]]
        [{:sim [:d :v] :simo {:dorder :strict}} [:d :v]]
        [{:sim [:d :b] :simo {:dorder :strict}} [:d :b]]
        [{:sim [:d :y] :simo {:dorder :strict}} [:d :y]]
        [{:sim [:d :u] :simo {:dorder :strict}} [:d :u]]
        [{:sim [:d :i] :simo {:dorder :strict}} [:d :i]]
        [{:sim [:d :o] :simo {:dorder :strict}} [:d :o]]
        [{:sim [:d :p] :simo {:dorder :strict}} [:d :p]]
        [{:sim [:d :n] :simo {:dorder :strict}} [:d :n]]
        [{:sim [:d :m] :simo {:dorder :strict}} [:d :m]]
        [{:sim [:d :comma] :simo {:dorder :strict}} [:d :comma]]
        [{:sim [:d :slash] :simo {:dorder :strict}} [:d :slash]]
        [{:sim [:d :period] :simo {:dorder :strict}} [:d :period]]
        [{:sim [:d :spacebar] :simo {:dorder :strict}} [:d :spacebar]]
        [{:sim [:d :semicolon] :simo {:dorder :strict}} [:d :semicolon]]
        [{:sim [:d :return_or_enter] :simo {:dorder :strict}} [:d :return_or_enter]]
        [{:sim [:d :delete_or_backspace] :simo {:dorder :strict}} [:d :delete_or_backspace]]
        ; These keys are also for the same finger as the "a" finger, so they
        ; are unlikely to be pressed at the same time. Minor nit.
        ; [{:sim [:d :e] :simo {:dorder :strict}} [:d :e]]
        ; [{:sim [:d :d] :simo {:dorder :strict}} [:d :d]]
        ; [{:sim [:d :c] :simo {:dorder :strict}} [:d :c]]

        ; When intending to activate navigation mode, j and k are frequently the
        ; first keys I'll press along with that, so there are higher changes
        ; that I actually want to activate navigation mode in that case.
        ; [{:sim [:d :h] :simo {:dorder :strict}} [:d :h]]
        ; [{:sim [:d :j] :simo {:dorder :strict}} [:d :j]]
        ; [{:sim [:d :k] :simo {:dorder :strict}} [:d :k]]
        ; [{:sim [:d :l] :simo {:dorder :strict}} [:d :l]]
    ]}
    {:des "toggle navigation mode"
      :rules [
        [:d ["navigation_mode" 1] nil {:alone :d :afterup ["navigation_mode" 0]}]
    ]}
    {:des "navigation mode (outlook)"
      :rules [:navigation_mode
        [:##i :!Topen_bracket :outlook]
        [:##o :!Tclose_bracket :outlook]
    ]}
    {:des "navigation mode (workplace chat)"
      :rules [:navigation_mode
        [:##i :!Copen_bracket :workplace_chat]
        [:##o :!Cclose_bracket :workplace_chat]
    ]}
    {:des "navigation mode (terminal)"
      :rules [:navigation_mode
        [:##i [:!Ta :p] :terminal]
        [:##o [:!Ta :n] :terminal]
        ; vim's command mode doesn't work well with option+arrow keys
        ; modifiers
        [:##h :left_arrow :terminal]
        [:##l :right_arrow :terminal]
    ]}
    {:des "navigation mode (all)"
      :rules [:navigation_mode
        ; arrow keys vim style
        [:##j :down_arrow]
        [:##k :up_arrow]
        [:##h :left_arrow {:held :!Oleft_arrow}]
        [:##l :right_arrow {:held :!Oright_arrow}]
        [:##f :left_shift]
        [:##s :left_option]
        [:##a :left_command]
        ; tab navigation mostly on browsers
        [:##i :!CSopen_bracket]
        [:##o :!CSclose_bracket]
        ; new tab
        [:##u :!Ct]
        ; close tab
        [:##m :!Cw]
    ]}

    {:des "space-numbers mode, fluid typing protection"
      :rules [
        [{:sim [:spacebar :q] :simo {:dorder :strict}} [:spacebar :q]]
        [{:sim [:spacebar :w] :simo {:dorder :strict}} [:spacebar :w]]
        [{:sim [:spacebar :e] :simo {:dorder :strict}} [:spacebar :e]]
        [{:sim [:spacebar :r] :simo {:dorder :strict}} [:spacebar :r]]
        [{:sim [:spacebar :t] :simo {:dorder :strict}} [:spacebar :t]]
        [{:sim [:spacebar :a] :simo {:dorder :strict}} [:spacebar :a]]
        [{:sim [:spacebar :s] :simo {:dorder :strict}} [:spacebar :s]]
        [{:sim [:spacebar :d] :simo {:dorder :strict}} [:spacebar :d]]
        [{:sim [:spacebar :f] :simo {:dorder :strict}} [:spacebar :f]]
        [{:sim [:spacebar :g] :simo {:dorder :strict}} [:spacebar :g]]
        [{:sim [:spacebar :z] :simo {:dorder :strict}} [:spacebar :z]]
        [{:sim [:spacebar :x] :simo {:dorder :strict}} [:spacebar :x]]
        [{:sim [:spacebar :c] :simo {:dorder :strict}} [:spacebar :c]]
        [{:sim [:spacebar :v] :simo {:dorder :strict}} [:spacebar :v]]
        [{:sim [:spacebar :b] :simo {:dorder :strict}} [:spacebar :b]]
        [{:sim [:spacebar :y] :simo {:dorder :strict}} [:spacebar :y]]
        [{:sim [:spacebar :u] :simo {:dorder :strict}} [:spacebar :u]]
        [{:sim [:spacebar :i] :simo {:dorder :strict}} [:spacebar :i]]
        [{:sim [:spacebar :o] :simo {:dorder :strict}} [:spacebar :o]]
        [{:sim [:spacebar :p] :simo {:dorder :strict}} [:spacebar :p]]
        [{:sim [:spacebar :h] :simo {:dorder :strict}} [:spacebar :h]]
        [{:sim [:spacebar :j] :simo {:dorder :strict}} [:spacebar :j]]
        [{:sim [:spacebar :k] :simo {:dorder :strict}} [:spacebar :k]]
        [{:sim [:spacebar :l] :simo {:dorder :strict}} [:spacebar :l]]
        [{:sim [:spacebar :n] :simo {:dorder :strict}} [:spacebar :n]]
        [{:sim [:spacebar :m] :simo {:dorder :strict}} [:spacebar :m]]
        [{:sim [:spacebar :comma] :simo {:dorder :strict}} [:spacebar :comma]]
        [{:sim [:spacebar :slash] :simo {:dorder :strict}} [:spacebar :slash]]
        [{:sim [:spacebar :period] :simo {:dorder :strict}} [:spacebar :period]]
        [{:sim [:spacebar :semicolon] :simo {:dorder :strict}} [:spacebar :semicolon]]
        [{:sim [:spacebar :return_or_enter] :simo {:dorder :strict}} [:spacebar :return_or_enter]]
        [{:sim [:spacebar :delete_or_backspace] :simo {:dorder :strict}} [:spacebar :delete_or_backspace]]
    ]}
    {:des "toggle space-numbers"
      :rules [
        [:spacebar ["numbers_mode" 1] nil {:alone :spacebar :afterup ["numbers_mode" 0]}]
    ]}

    {:des "when on the browser"
      :rules [:browser
        [:l {:key :l :repeat false} nil {:held {:key :!Cl :repeat false} :params {:held 400}}]
        [:r {:key :r :repeat false} nil {:held {:key :!CSr :repeat false} :params {:held 400}}]
        ; The keyup on the "i" has to happen "quickly" for the devtools to open
        ; so I decreased the held time from the others.
        [:i {:key :i :repeat false} nil {:held {:key :!COi :repeat false} :params {:held 300}}]
    ]}

    {:des "apple keyboards"
      :rules [:macbook_internal
        ; Disable arrow keys
        [:##left_arrow :vk_none]
        [:##right_arrow :vk_none]
        [:##up_arrow :vk_none]
        [:##down_arrow :vk_none]
        ; caps_lock: alone -> escape, hold -> left_control
        [:##caps_lock :left_control nil {:alone :escape}]
    ]}

    {:des "kinesis advantage"
      :rules [:kadv2
        ; Disable arrow keys
        [:##left_arrow :vk_none]
        [:##right_arrow :vk_none]
        [:##up_arrow :vk_none]
        [:##down_arrow :vk_none]
        ; Disable some thumb cluster keys
        [:##right_option :vk_none]
        [:##left_option :vk_none]
        [:##page_up :vk_none]
        [:##home :vk_none]
        [:##end :vk_none]
        [:##page_down :vk_none]
        ; Disable number row
        [:##hyphen :vk_none]
        [:##equal_sign :vk_none]
        [:##1 :vk_none]
        [:##2 :vk_none]
        [:##3 :vk_none]
        [:##4 :vk_none]
        [:##5 :vk_none]
        [:##6 :vk_none]
        [:##7 :vk_none]
        [:##8 :vk_none]
        [:##9 :vk_none]
        [:##0 :vk_none]
        ; Disable some base layout keys
        [:##non_us_backslash :vk_none]
        [:##grave_accent_and_tilde :vk_none]
        [:##open_bracket :vk_none]
        [:##close_bracket :vk_none]
        [:##tab :vk_none]
        [:##caps_lock :vk_none]
        [:##left_shift :vk_none]
        [:##right_shift :vk_none]
        [:##backslash :vk_none]
        [:##quote :vk_none]

        ; "delete_forward: alone -> escape, hold -> left_shift"
        [:##delete_forward :left_shift nil {:alone :escape}]
        ; "left_command alone -> tab, hold -> left_command"
        [:##left_command :left_command nil {:alone :tab}]
        [:##right_command :right_option]
        ; "enter: alone -> return_or_enter, hold -> right_control"
        [:##return_or_enter :right_control nil {:alone :return_or_enter}]
    ]}

    ; {:des "any device"
    ;   :rules [
    ; ]}

    {:des "disable cmd+q"
      :rules [
        [:!Cq :vk_none]
        [:!Qq :vk_none]
        ; Triggers cmd+q by holding q for 1 second.
        [:q {:key :q :repeat false} nil {:held {:key :!Cq :repeat false} :params {:held 1000}}]
    ]}

  ]
}
