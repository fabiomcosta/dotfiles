;; Implementation of this keyboard layout
;; http://www.keyboard-layout-editor.com/#/gists/5ddb4214a2999a9ba0b298dbecbd0685

;; !  | means mandatory -   modifier(s) alone when pressed change behavior
;; #  | means optional  -   modifiers are optional (but at least one necessary)

;; :!Ca is keycode :a and prefix a with !C

;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift

;; ## | optional any
;; !! | command + control + optional + shift (hyper)

{
  :profiles  {
    :Goku {
      :default true
      :sim 120    ; Keys need to be pressed within this threshold to be considered simultaneous
      :delay 140  ; Time after which the key press is delayed
      :held 140   ; Delay to register held key
      :alone 210  ; Hold for .. ms to register single tap
    }
  }

  :devices {
    :macbook_internal [
      {:vendor_id 1452  :product_id 832} ; MBP keyboard
      {:vendor_id 1452 :product_id 615}  ; Magic keyboard USB
      {:vendor_id 76 :product_id 615}    ; Magic keyboard Bluetooth
    ]
    :kadv2            [{:vendor_id 10730 :product_id 258}]
    :draculad         [{:vendor_id 1 :product_id 2}]
  }

  :applications {
    :browser ["^com\\.google\\.Chrome$" "^com\\.google\\.Chrome\\.canary$" "^company\\.thebrowser\\.Browser$"]
    :outlook ["^com\\.microsoft\\.Outlook$"]
    :workplace_chat ["^workplace-desktop$"]
    :terminal ["^org\\.alacritty$"]
  }

  :templates {
    :hsl "~/homebrew/bin/hs -A -n -q -t 0.5 -c 'require(\"keyboard.hyper\").openApplication(\"%s\")'"
    :external_display_brightness_decrement "~/bin/m1ddc chg luminance -20"
    :external_display_brightness_increment "~/bin/m1ddc chg luminance +20"
    :display_sleep "sleep 1 && pmset sleepnow"
  }

  :simlayer-threshold 210
  :simlayers {
    :mouse_mode {:key :a :afterup {:set ["mouse_mode_scroll" 0]}}
    :media_fn_mode {:key :slash}
    :open_mode {:key :comma}
  }

  ; :layers {
  ; }

  ;; each manipulator has a description and multiple rules

  ;;{:des "..."                                       ;; -> description
  ;; :rules[
  ;;          [<from>  <to>  <conditions>]            ;; -> rule 1
  ;;          [<from>  <to>  <conditions>]            ;; -> rule 2
  ;; ]}

  ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
  ;;       |_____| |_______________| |_| |_________________________________________|
  ;;        <from>    <to>      <conditions>         <other options>

  :main [

    {:des "mouse mode"
      :rules [
        [:##j {:mkey {:vwheel 120}} [:mouse_mode_scroll :mouse_mode]]
        [:##h {:mkey {:hwheel 120}} [:mouse_mode_scroll :mouse_mode]]
        [:##k {:mkey {:vwheel -120}} [:mouse_mode_scroll :mouse_mode]]
        [:##l {:mkey {:hwheel -120}} [:mouse_mode_scroll :mouse_mode]]
        :mouse_mode
        [:##j {:mkey {:y 5000}}]
        [:##k {:mkey {:y -5000}}]
        [:##h {:mkey {:x -5000}}]
        [:##l {:mkey {:x 5000}}]
        [:##c {:pkey :button1}]
        [:##v {:pkey :button2}]
        [:##b {:pkey :button3}]
        [:##s ["mouse_mode_scroll" 1] nil {:afterup ["mouse_mode_scroll" 0]}]
        [:##f {:mkey {:speed 0.2}}]
        ; mappings that require my right hand to be on the pointer device
        [:##w :!SC4] ; activates screen-shot mode
        [:##e :!SC5] ; activates screen-recording mode
    ]}


    {:des "symbols mode"
      :rules [:symbols_mode
        [:##e :!Scomma]                  ; <
        [:##r :!Speriod]                 ; >
        [:##t :!S5]                      ; %
        [:##a :backslash]                ; \
        [:##s :!Sbackslash]              ; |
        [:##d :open_bracket]             ; [
        [:##f :close_bracket]            ; ]
        [:##g :!Sgrave_accent_and_tilde] ; ~
        [:##c :equal_sign]               ; =
        [:##v :!Sequal_sign]             ; +
        [:##b :!S7]                      ; &
        [:##y :!Squote]                  ; "
        [:##h :quote]                    ; '
        [:##n :grave_accent_and_tilde]   ; `
        [:##u :!Sopen_bracket]           ; {
        [:##i :!Sclose_bracket]          ; }
        [:##j :!S9]                      ; (
        [:##k :!S0]                      ; )
        [:##m :hyphen]                   ; -
        [:##comma :!Shyphen]             ; _
        [:##o :!S1]                      ; !
        [:##p :!S2]                      ; @
        [:##l :!S3]                      ; #
        [:##semicolon :!S8]              ; *
        [:##period :!S6]                 ; ^
        [:##slash :!S4]                  ; $
        [:##quote :!S5]                  ; %
    ]}

    ;; Navigation Mode, based on (S)uper (D)uper mode
    ;; idea from https://github.com/jasonrudolph/keyboard
    ;; implementation from https://gist.github.com/narze/1eb7d0f14b6177ea0360f5dc214867b0

    ;; I'd consider this a new type of layer, it's different from
    ;; simlayers and layers, let me try to explain.
    ;;
    ;; This new type of layer is very similar to what's called "layer" on goku,
    ;; in the sense that when holding the key that defines the layer, the key
    ;; itself won't be triggered nor repea will, but it fixes the issue that
    ;; woudln't allow fast typing using that key by adding these simultaneous
    ;; interrupt events on each other key that can be simultaneously pressed
    ;; with the layer key.
    ;; This means that the layer is only really activated if the layer key is
    ;; pressed adn held for a little while, and not used simultaneously with
    ;; other keys.
    ;; This is perfect for home row modifier configurations, for example.
    {:des "navigation mode, fluid typing protection"
      :rules [
        [{:sim [:d :q] :simo {:dorder :strict}} [:d :q]]
        [{:sim [:d :w] :simo {:dorder :strict}} [:d :w]]
        [{:sim [:d :e] :simo {:dorder :strict}} [:d :e]]
        [{:sim [:d :r] :simo {:dorder :strict}} [:d :r]]
        [{:sim [:d :t] :simo {:dorder :strict}} [:d :t]]
        [{:sim [:d :a] :simo {:dorder :strict}} [:d :a]]
        [{:sim [:d :s] :simo {:dorder :strict}} [:d :s]]
        [{:sim [:d :f] :simo {:dorder :strict}} [:d :f]]
        [{:sim [:d :g] :simo {:dorder :strict}} [:d :g]]
        [{:sim [:d :z] :simo {:dorder :strict}} [:d :z]]
        [{:sim [:d :x] :simo {:dorder :strict}} [:d :x]]
        [{:sim [:d :c] :simo {:dorder :strict}} [:d :c]]
        [{:sim [:d :v] :simo {:dorder :strict}} [:d :v]]
        [{:sim [:d :b] :simo {:dorder :strict}} [:d :b]]
        [{:sim [:d :y] :simo {:dorder :strict}} [:d :y]]
        [{:sim [:d :u] :simo {:dorder :strict}} [:d :u]]
        [{:sim [:d :i] :simo {:dorder :strict}} [:d :i]]
        [{:sim [:d :o] :simo {:dorder :strict}} [:d :o]]
        [{:sim [:d :p] :simo {:dorder :strict}} [:d :p]]
        [{:sim [:d :n] :simo {:dorder :strict}} [:d :n]]
        [{:sim [:d :m] :simo {:dorder :strict}} [:d :m]]
        [{:sim [:d :comma] :simo {:dorder :strict}} [:d :comma]]
        [{:sim [:d :slash] :simo {:dorder :strict}} [:d :slash]]
        [{:sim [:d :period] :simo {:dorder :strict}} [:d :period]]
        [{:sim [:d :spacebar] :simo {:dorder :strict}} [:d :spacebar]]
        [{:sim [:d :semicolon] :simo {:dorder :strict}} [:d :semicolon]]
        [{:sim [:d :return_or_enter] :simo {:dorder :strict}} [:d :return_or_enter]]
        [{:sim [:d :delete_or_backspace] :simo {:dorder :strict}} [:d :delete_or_backspace]]

        ; When intending to activate navigation mode, j and k are frequently the
        ; first keys I'll press along with that, so there are higher changes
        ; that I actually want to activate navigation mode in that case.
        ; [{:sim [:d :h] :simo {:dorder :strict}} [:d :h]]
        ; [{:sim [:d :j] :simo {:dorder :strict}} [:d :j]]
        ; [{:sim [:d :k] :simo {:dorder :strict}} [:d :k]]
        ; [{:sim [:d :l] :simo {:dorder :strict}} [:d :l]]
    ]}
    {:des "toggle navigation mode"
      :rules [
        [:d ["navigation_mode" 1] nil {:alone :d :afterup ["navigation_mode" 0]}]
    ]}
    {:des "navigation mode (outlook)"
      :rules [:navigation_mode
        [:##i :!Topen_bracket :outlook]
        [:##o :!Tclose_bracket :outlook]
    ]}
    {:des "navigation mode (workplace chat)"
      :rules [:navigation_mode
        [:##i :!Copen_bracket :workplace_chat]
        [:##o :!Cclose_bracket :workplace_chat]
    ]}
    {:des "navigation mode (terminal)"
      :rules [:navigation_mode
        [:##i [:!Ta :p] :terminal]
        [:##o [:!Ta :n] :terminal]
        ; vim's command mode doesn't work well with option+arrow keys
        ; modifiers
        [:##h :left_arrow :terminal]
        [:##l :right_arrow :terminal]
    ]}
    {:des "navigation mode (all)"
      :rules [:navigation_mode
        ; arrow keys vim style
        [:##j :down_arrow]
        [:##k :up_arrow]
        [:##h :left_arrow {:held :!Oleft_arrow}]
        [:##l :right_arrow {:held :!Oright_arrow}]
        [:##s :left_option]
        ; [:##f :left_shift]
        ; [:##a :left_command]
        ; tab navigation mostly on browsers
        [:##i :!CSopen_bracket]
        [:##o :!CSclose_bracket]
        ; new tab
        ; [:##u :!Ct]
        ; close tab
        ; [:##m :!Cw]
    ]}


    ; {:des "home-row-mod fluid typing protection"
    ;   :rules [
    ;     [{:sim [:f :q] :simo {:dorder :strict}} [:f :q]]
    ;     [{:sim [:f :e] :simo {:dorder :strict}} [:f :e]]
    ;     [{:sim [:f :r] :simo {:dorder :strict}} [:f :r]]
    ;     [{:sim [:f :t] :simo {:dorder :strict}} [:f :t]]
    ;     [{:sim [:f :a] :simo {:dorder :strict}} [:f :a]]
    ;     [{:sim [:f :s] :simo {:dorder :strict}} [:f :s]]
    ;     [{:sim [:f :d] :simo {:dorder :strict}} [:f :d]]
    ;     [{:sim [:f :g] :simo {:dorder :strict}} [:f :g]]
    ;     [{:sim [:f :z] :simo {:dorder :strict}} [:f :z]]
    ;     [{:sim [:f :c] :simo {:dorder :strict}} [:f :c]]
    ;     [{:sim [:f :v] :simo {:dorder :strict}} [:f :v]]
    ;     [{:sim [:f :b] :simo {:dorder :strict}} [:f :b]]
    ;     [{:sim [:f :y] :simo {:dorder :strict}} [:f :y]]
    ;     [{:sim [:f :u] :simo {:dorder :strict}} [:f :u]]
    ;     [{:sim [:f :i] :simo {:dorder :strict}} [:f :i]]
    ;     [{:sim [:f :o] :simo {:dorder :strict}} [:f :o]]
    ;     [{:sim [:f :p] :simo {:dorder :strict}} [:f :p]]
    ;     [{:sim [:f :h] :simo {:dorder :strict}} [:f :h]]
    ;     [{:sim [:f :j] :simo {:dorder :strict}} [:f :j]]
    ;     [{:sim [:f :k] :simo {:dorder :strict}} [:f :k]]
    ;     [{:sim [:f :l] :simo {:dorder :strict}} [:f :l]]
    ;     [{:sim [:f :n] :simo {:dorder :strict}} [:f :n]]
    ;     [{:sim [:f :m] :simo {:dorder :strict}} [:f :m]]
    ;     [{:sim [:f :comma] :simo {:dorder :strict}} [:f :comma]]
    ;     [{:sim [:f :slash] :simo {:dorder :strict}} [:f :slash]]
    ;     [{:sim [:f :period] :simo {:dorder :strict}} [:f :period]]
    ;     [{:sim [:f :spacebar] :simo {:dorder :strict}} [:f :spacebar]]
    ;     [{:sim [:f :semicolon] :simo {:dorder :strict}} [:f :semicolon]]
    ;     [{:sim [:f :return_or_enter] :simo {:dorder :strict}} [:f :return_or_enter]]
    ;     ; [{:sim [:f :delete_or_backspace] :simo {:dorder :strict}} [:f :delete_or_backspace]]

    ;     [{:sim [:j :q] :simo {:dorder :strict}} [:j :q]]
    ;     [{:sim [:j :e] :simo {:dorder :strict}} [:j :e]]
    ;     [{:sim [:j :r] :simo {:dorder :strict}} [:j :r]]
    ;     [{:sim [:j :t] :simo {:dorder :strict}} [:j :t]]
    ;     [{:sim [:j :a] :simo {:dorder :strict}} [:j :a]]
    ;     [{:sim [:j :s] :simo {:dorder :strict}} [:j :s]]
    ;     [{:sim [:j :d] :simo {:dorder :strict}} [:j :d]]
    ;     [{:sim [:j :f] :simo {:dorder :strict}} [:j :f]]
    ;     [{:sim [:j :g] :simo {:dorder :strict}} [:j :g]]
    ;     [{:sim [:j :z] :simo {:dorder :strict}} [:j :z]]
    ;     [{:sim [:j :c] :simo {:dorder :strict}} [:j :c]]
    ;     [{:sim [:j :v] :simo {:dorder :strict}} [:j :v]]
    ;     [{:sim [:j :b] :simo {:dorder :strict}} [:j :b]]
    ;     [{:sim [:j :y] :simo {:dorder :strict}} [:j :y]]
    ;     [{:sim [:j :u] :simo {:dorder :strict}} [:j :u]]
    ;     [{:sim [:j :i] :simo {:dorder :strict}} [:j :i]]
    ;     [{:sim [:j :o] :simo {:dorder :strict}} [:j :o]]
    ;     [{:sim [:j :p] :simo {:dorder :strict}} [:j :p]]
    ;     [{:sim [:j :h] :simo {:dorder :strict}} [:j :h]]
    ;     [{:sim [:j :k] :simo {:dorder :strict}} [:j :k]]
    ;     [{:sim [:j :l] :simo {:dorder :strict}} [:j :l]]
    ;     [{:sim [:j :n] :simo {:dorder :strict}} [:j :n]]
    ;     [{:sim [:j :m] :simo {:dorder :strict}} [:j :m]]
    ;     [{:sim [:j :comma] :simo {:dorder :strict}} [:j :comma]]
    ;     [{:sim [:j :slash] :simo {:dorder :strict}} [:j :slash]]
    ;     [{:sim [:j :period] :simo {:dorder :strict}} [:j :period]]
    ;     [{:sim [:j :spacebar] :simo {:dorder :strict}} [:j :spacebar]]
    ;     [{:sim [:j :semicolon] :simo {:dorder :strict}} [:j :semicolon]]
    ;     [{:sim [:j :return_or_enter] :simo {:dorder :strict}} [:j :return_or_enter]]
    ;     ; [{:sim [:j :delete_or_backspace] :simo {:dorder :strict}} [:j :delete_or_backspace]]
    ; ]}
    ; {:des "toggle option home-row-mod"
    ;   :rules [
    ;     [:##f :left_option nil {:alone :f}]
    ;     ; disable j as right_option on terminals because I use that quite
    ;     ; extensively on vim.
    ;     [:##j :right_option :!terminal {:alone :j}]
    ; ]}


    ; :modi :any is so that the protection also works while pressing the
    ; keys with other modifier keys, like shift and command.
    ; the sim param controls the timeout so that we only enable numbers
    ; mode after space is held for {:sim}ms without any other simultaneous key pressed.
    {:des "numbers mode, fluid typing protection"
      :rules [
        [{:sim [:spacebar :q] :simo {:dorder :strict} :modi :any} [:spacebar :q] nil {:params {:sim 130}}]
        [{:sim [:spacebar :w] :simo {:dorder :strict} :modi :any} [:spacebar :w] nil {:params {:sim 130}}]
        [{:sim [:spacebar :e] :simo {:dorder :strict} :modi :any} [:spacebar :e] nil {:params {:sim 130}}]
        [{:sim [:spacebar :r] :simo {:dorder :strict} :modi :any} [:spacebar :r] nil {:params {:sim 130}}]
        [{:sim [:spacebar :t] :simo {:dorder :strict} :modi :any} [:spacebar :t] nil {:params {:sim 130}}]
        [{:sim [:spacebar :a] :simo {:dorder :strict} :modi :any} [:spacebar :a] nil {:params {:sim 130}}]
        [{:sim [:spacebar :s] :simo {:dorder :strict} :modi :any} [:spacebar :s] nil {:params {:sim 130}}]
        [{:sim [:spacebar :d] :simo {:dorder :strict} :modi :any} [:spacebar :d] nil {:params {:sim 130}}]
        [{:sim [:spacebar :f] :simo {:dorder :strict} :modi :any} [:spacebar :f] nil {:params {:sim 130}}]
        [{:sim [:spacebar :g] :simo {:dorder :strict} :modi :any} [:spacebar :g] nil {:params {:sim 130}}]
        [{:sim [:spacebar :z] :simo {:dorder :strict} :modi :any} [:spacebar :z] nil {:params {:sim 130}}]
        [{:sim [:spacebar :x] :simo {:dorder :strict} :modi :any} [:spacebar :x] nil {:params {:sim 130}}]
        [{:sim [:spacebar :c] :simo {:dorder :strict} :modi :any} [:spacebar :c] nil {:params {:sim 130}}]
        [{:sim [:spacebar :v] :simo {:dorder :strict}} [:spacebar :v] nil {:params {:sim 130}}]
        [{:sim [:spacebar :b] :simo {:dorder :strict} :modi :any} [:spacebar :b] nil {:params {:sim 130}}]
        [{:sim [:spacebar :y] :simo {:dorder :strict} :modi :any} [:spacebar :y] nil {:params {:sim 130}}]
        [{:sim [:spacebar :u] :simo {:dorder :strict} :modi :any} [:spacebar :u] nil {:params {:sim 130}}]
        [{:sim [:spacebar :i] :simo {:dorder :strict} :modi :any} [:spacebar :i] nil {:params {:sim 130}}]
        [{:sim [:spacebar :o] :simo {:dorder :strict} :modi :any} [:spacebar :o] nil {:params {:sim 130}}]
        [{:sim [:spacebar :p] :simo {:dorder :strict} :modi :any} [:spacebar :p] nil {:params {:sim 130}}]
        [{:sim [:spacebar :h] :simo {:dorder :strict} :modi :any} [:spacebar :h] nil {:params {:sim 130}}]
        [{:sim [:spacebar :j] :simo {:dorder :strict} :modi :any} [:spacebar :j] nil {:params {:sim 130}}]
        [{:sim [:spacebar :k] :simo {:dorder :strict} :modi :any} [:spacebar :k] nil {:params {:sim 130}}]
        [{:sim [:spacebar :l] :simo {:dorder :strict} :modi :any} [:spacebar :l] nil {:params {:sim 130}}]
        [{:sim [:spacebar :semicolon] :simo {:dorder :strict} :modi :any} [:spacebar :semicolon] nil {:params {:sim 130}}]
        [{:sim [:spacebar :n] :simo {:dorder :strict} :modi :any} [:spacebar :n] nil {:params {:sim 130}}]
        [{:sim [:spacebar :m] :simo {:dorder :strict} :modi :any} [:spacebar :m] nil {:params {:sim 130}}]
        [{:sim [:spacebar :comma] :simo {:dorder :strict} :modi :any} [:spacebar :comma] nil {:params {:sim 130}}]
        [{:sim [:spacebar :period] :simo {:dorder :strict} :modi :any} [:spacebar :period] nil {:params {:sim 130}}]
        [{:sim [:spacebar :slash] :simo {:dorder :strict} :modi :any} [:spacebar :slash] nil {:params {:sim 130}}]
        ; [{:sim [:spacebar :return_or_enter] :simo {:dorder :strict}} [:spacebar :return_or_enter]]
        ; [{:sim [:spacebar :delete_or_backspace] :simo {:dorder :strict}} [:spacebar :delete_or_backspace]]
        ; [{:sim [:spacebar :left_command] :simo {:dorder :strict}} [:spacebar :left_command]]
        ; [{:sim [:spacebar :right_control] :simo {:dorder :strict}} [:spacebar :right_control]]
        ; [{:sim [:spacebar :left_shift] :simo {:dorder :strict}} [:spacebar :left_shift]]
        ; [{:sim [:spacebar :tab] :simo {:dorder :strict}} [:spacebar :tab]]
    ]}
    {:des "numbers mode"
      :rules [:numbers_mode
        ; numbers row
        ; [:##q :1]
        ; [:!Sq :1]
        ; [:!Rq :1]

        ; [:##w :2]
        ; [:##e :3]
        ; [:##r :4]
        ; [:##t :5]
        ; [:##y :6]
        [:##u :7]
        [:##i :8]
        [:##o :9]
        ; [:##p :0]
        ; numbers pad-like style, trying to see if this sticks.
        [:##m :1]
        [:##comma :2]
        [:##period :3]
        [:##j :4]
        [:##k :5]
        [:##l :6]
        [:##h :0]
    ]}


    {:des "media+fn mode"
      :rules [:media_fn_mode
        [:q :display_brightness_decrement]
        [:w :display_brightness_increment]
        [:e [:external_display_brightness_decrement]]
        [:r [:external_display_brightness_increment]]
        ; [:e :illumination_decrement]
        ; [:r :illumination_increment]
        ; [:a :mission_control]
        [:s :rewind]
        [:d :play_or_pause]
        [:f :fast_forward]
        [:x :mute]
        [:c :volume_decrement]
        [:v :volume_increment]
        [:##y :f1]
        [:##u :f2]
        [:##i :f3]
        [:##o :f4]
        [:##h :f5]
        [:##j :f6]
        [:##k :f7]
        [:##l :f8]
        [:##n :f9]
        [:##m :f10]
        [:##comma :f11]
        [:##period :f12]
    ]}


    {:des "launch mode"
      :rules [:open_mode
        [:a [:hsl "Spotify"]]
        [:b [:hsl "Google Chrome"]]
        [:c [:hsl "Workplace Chat"]]
        [:e [:hsl "VS Code @ FB"]]
        [:f [:hsl "Finder"]]
        [:m [:hsl "Microsoft Outlook"]]
        [:t [:hsl "Alacritty"]]
        [:n [:hsl "Notion"]]
        [:v [:hsl "zoom.us"]]
    ]}


    {:des "when on the browser"
      :rules [:browser
        [:l {:key :l :repeat false} nil {:held {:key :!Cl :repeat false} :params {:held 400}}]
        [:r {:key :r :repeat false} nil {:held {:key :!CSr :repeat false} :params {:held 400}}]
        [:t {:key :t :repeat false} nil {:held {:key :!Ct :repeat false} :params {:held 400}}]
        ; The keyup on the "i" has to happen "quickly" for the devtools to open
        ; so I decreased the held time from the others.
        [:i {:key :i :repeat false} nil {:held {:key :!COi :repeat false} :params {:held 300}}]
    ]}

    {:des "apple keyboards"
      :rules [:macbook_internal
        ; Disable arrow keys
        [:##left_arrow :vk_none]
        [:##right_arrow :vk_none]
        [:##up_arrow :vk_none]
        [:##down_arrow :vk_none]
    ]}

    {:des "kinesis advantage"
      :rules [:kadv2
        ; Disable arrow keys
        [:##left_arrow :vk_none]
        [:##right_arrow :vk_none]
        [:##up_arrow :vk_none]
        [:##down_arrow :vk_none]
        ; Disable some thumb cluster keys
        [:##right_option :vk_none]
        [:##left_option :vk_none]
        [:##page_up :vk_none]
        [:##home :vk_none]
        [:##end :vk_none]
        [:##page_down :vk_none]
        ; Disable number row
        [:##hyphen :vk_none]
        [:##equal_sign :vk_none]
        [:##1 :vk_none]
        [:##2 :vk_none]
        [:##3 :vk_none]
        [:##4 :vk_none]
        [:##5 :vk_none]
        [:##6 :vk_none]
        [:##7 :vk_none]
        [:##8 :vk_none]
        [:##9 :vk_none]
        [:##0 :vk_none]
        ; Disable some base layout keys
        [:##non_us_backslash :vk_none]
        [:##grave_accent_and_tilde :vk_none]
        [:##open_bracket :vk_none]
        [:##close_bracket :vk_none]
        [:##tab :vk_none]
        [:##caps_lock :vk_none]
        [:##left_shift :vk_none]
        [:##right_shift :vk_none]
        [:##backslash :vk_none]
        [:##quote :vk_none]

        ; Disable the shift symbols that were moved to the symbols layer
        [:!Scomma :vk_none]
        [:!Rcomma :vk_none]
        [:!Speriod :vk_none]
        [:!Rperiod :vk_none]

        ; This used to be on the keyboard itself, now moved here.
        [:##left_control :left_command]

        ; "delete_forward: alone -> escape, hold -> left_shift"
        [:##delete_forward :left_shift nil {:alone :escape}]
        ; "right_control alone -> tab, hold -> right_control"
        [:##right_control :right_control nil {:alone :tab}]
        ; "enter: alone -> return_or_enter, hold -> symbols_mode"
        [:##return_or_enter ["symbols_mode" 1] nil {:alone :return_or_enter :afterup ["symbols_mode" 0]}]
        [:spacebar ["numbers_mode" 1] nil {:alone :spacebar :afterup ["numbers_mode" 0]}]
    ]}

    {:des "draculad"
      :rules [:draculad
        ; "delete_forward: alone -> escape, hold -> left_shift"
        [:##delete_forward :left_shift nil {:alone :escape}]
        ; "left_command alone -> escape, hold -> left_command"
        ; [:##left_command :left_command nil {:alone :escape}]
        ; "left_command alone -> tab, hold -> symbols_mode"
        [:##right_command :right_control nil {:alone :tab}]
        ; "enter: alone -> return_or_enter, hold -> right_control"
        [:##return_or_enter ["symbols_mode" 1] nil {:alone :return_or_enter :afterup ["symbols_mode" 0]}]
    ]}

    {:des "all keyboards"
      :rules [
        ; caps_lock: alone -> escape, hold -> left_control
        [:##caps_lock :left_control nil {:alone :escape}]
        [:!CWs [:display_sleep]]
    ]}

    {:des "disable cmd+q"
      :rules [
        [:!Cq :vk_none]
        [:!Qq :vk_none]
        ; Triggers cmd+q by holding q for 1 second.
        [:q {:key :q :repeat false} nil {:held {:key :!Cq :repeat false} :params {:held 1000}}]
    ]}
  ]
}
